<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>output</title>
    <description>sunyoung-dev</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 Oct 2021 20:33:15 +0900</pubDate>
    <lastBuildDate>Wed, 27 Oct 2021 20:33:15 +0900</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>[Elasticsearch] 노드 제외되었을 때 샤드할당 지연시키기</title>
        <description>&lt;p&gt;다음은 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/delayed-allocation.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/delayed-allocation.html&lt;/a&gt; 문서를 번역한 내용입니다.&lt;/p&gt;

&lt;p&gt;어떤 이유이던간에, 노드가 클러스터에서 제외되면 마스터는 다음과 같은 반응을 보인다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;제외된 노드의 프라이머리 샤드에 대한 레플리카 샤드를 프라이머리 샤드로 승격시킨다&lt;/li&gt;
  &lt;li&gt;(프라이머리 샤드가 되어) 사라진 레플리카 샤드를 대체할 레플리카 샤드를 할당한다&lt;/li&gt;
  &lt;li&gt;남아있는 노드들에 샤드가 균등하게 분포하도록 리밸런싱 작업을 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 작업은 가능한 빠르게 모든 샤드가 레플리카 샤드를 가지도록 함으로써 데이터 유실을 방지하기 위해 실행된다.&lt;/p&gt;

&lt;p&gt;노드 레벨과 클러스터 레벨에서 모두 동시에 실행되는 복제에 대해 throttle 설정이 있긴 하지만, 이 “shard-shuffle” 작업은 클러스터에 여전히 큰 추가적인 부담을 준다. 만약 제외된 노드가 곧 돌아올 상황에서는 필요하지 않은 작업이다. 다음 시나리오를 생각해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;노드 5번의 네트워크 연결이 끊김&lt;/li&gt;
  &lt;li&gt;마스터가 노드 5번이 가지고 있던 프라이머리 샤드에 대해 모든 레플리카 샤드를 프라이머리 샤드로 승격시킴&lt;/li&gt;
  &lt;li&gt;마스터가 새로운 레플리카 샤드를 다른 노드에 할당함&lt;/li&gt;
  &lt;li&gt;새로운 레플리카 샤드는 네트워크를 통해서 프라이머리 샤드에 대한 전체 복사본을 생성함&lt;/li&gt;
  &lt;li&gt;클러스터 리밸런싱 작업으로 더 많은 샤드가 다른 노드로 이동&lt;/li&gt;
  &lt;li&gt;노드 5번이 얼마 지나지 않아 클러스터에 포함됨&lt;/li&gt;
  &lt;li&gt;노드 5번에 샤드를 할당함으로써 클러스터 리밸런싱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 마스터가 몇분만 기다렸다면, 사라진 샤드들은 노드 5번에 최소한의 네트워크 트래픽만 사용하고 재할당 될 수 있었을 것이다. 이 과정은 유휴 샤드라면 (인덱싱 요청을 받지 않는 샤드) 자동으로 sync-flushed 되면서 더 빠르게 진행된다.&lt;/p&gt;

&lt;p&gt;노드가 제외되면서 미할당(unassigned) 상태가 된 레플리카 샤드의 할당 작업은 기본값이 1m인 index.unassigned.node_left.delayed_timeout 값을 설정함으로써 지연시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;PUT _all/_settings
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;index.unassigned.node_left.delayed_timeout&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;5m&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;할당 지연 설정이 된 상태라면, 위의 시나리오는 다음과 같아진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;노드 5번의 네트워크 연결이 끊김&lt;/li&gt;
  &lt;li&gt;마스터가 노드 5번이 가지고 있던 프라이머리 샤드에 대해 모든 레플리카 샤드를 프라이머리 샤드로 승격시킴&lt;/li&gt;
  &lt;li&gt;마스터가 미할당 상태인 샤드가 지연되었으며 얼마나 지연되었는지 로그로 기록함&lt;/li&gt;
  &lt;li&gt;미할당된 레플리카 샤드가 있기 때문에 클러스터의 상태는 yellow로 남아있음&lt;/li&gt;
  &lt;li&gt;노드 5번이 설정한 timeout이 지나기 전에 정상으로 돌아옴&lt;/li&gt;
  &lt;li&gt;사라진 레플리카들은 노드 5번에 재할당됨 (sync-flushed 된 샤드는 거의 즉시 복구됨)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 설정은 레플리카를 프라이머리로 승격시키는 것과 이전에 할당되지 않은 레플리카를 할당하는 것에는 영향을 주지 않는다. 특히 클러스터 재시작 이후에는 지연된 할당이 적용되지 않는다. 또한 마스터가 failover된 경우에는 지연시간이 초기화된다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;shard-allocation-취소&quot;&gt;Shard allocation 취소&lt;/h3&gt;

&lt;p&gt;지연된 할당 시간이 지나게 되면 복구 작업의 시작으로 마스터가 사라진 샤드를 다른 노드에 할당하게 된다. 사라진 노드가 클러스터에 다시 합류하게 되었고, 해당 노드의 샤드가 프라이머리의 sync-id를 계속 가지고 있다면, 샤드 할당은 취소되고 synced shard는 복구를 위해 사용된다.&lt;/p&gt;

&lt;p&gt;이렇게 때문에 기본 timeout 값이 1분으로 설정되어 있는 것이다. 샤드 할당이 시작되더라도, 동기화된 샤드의 복구를 취소하는 것이 싸다.&lt;/p&gt;

&lt;h3 id=&quot;지연된-미할당-샤드-모니터링하기&quot;&gt;지연된 미할당 샤드 모니터링하기&lt;/h3&gt;

&lt;p&gt;위의 설정 값을 통해 샤드 할당이 지연된 샤드의 개수를 cluster health API를 통해서 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;GET _cluster/health
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 응답의 delayed_unassigned_shards 값을 확인하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;노드-영구적으로-제외시키기&quot;&gt;노드 영구적으로 제외시키기&lt;/h3&gt;

&lt;p&gt;노드가 정상으로 돌아오지 않고 엘라스틱서치가 사라진 샤드를 즉시 할당하기를 원한다면, 타임아웃 값을 0으로 설정하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;PUT _all/_settings
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;index.unassigned.node_left.delayed_timeout&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사라진 샤드가 복구를 시작하자마자 타임아웃 설정을 재설정 할 수 있다.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Oct 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2021/10/07/delayed-allocation/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/10/07/delayed-allocation/</guid>
        
        <category>엘라스틱서치</category>
        
        
      </item>
    
      <item>
        <title>Understanding Java G1GC - Part2</title>
        <description>&lt;h3 id=&quot;g1gc&quot;&gt;G1GC&lt;/h3&gt;

&lt;p&gt;Time based : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:MaxGCPauseMillis=200&lt;/code&gt; 옵션을 통해 Max Pause Time을 설정할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;data-structure&quot;&gt;Data Structure&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Collections Sets (CS)&lt;/strong&gt; : Collection의 대상이 되는 region의 목록이다. Collections set 단위로 GC가 수행된다. Collection set에는 항상 모든 Young Generation 영역이 포함되고, 일부 Old Generation 영역이 포함되기도 포함되지 않기도 한다. Collection의 대상은 목표 GC Pause time에 얼마나 적합하느냐, Live Objects를 얼마나 가지고 있느냐에 따라 결정된다. Collection set에 Garbage를 많이 가지고 있는 Region이 먼저 할당되기 때문에 G1GC의 이름이 Garbage First Collector 인 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remembered Sets (RS)&lt;/strong&gt; : Region 별로 가지고 있는 바깥으로부터 참조에 대한 목록이다. 이 목록을 가지고 있기 때문에 Gc Pause Time이 얼마나 걸릴지 예측할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;g1gc-cycle&quot;&gt;G1GC Cycle&lt;/h2&gt;

&lt;p&gt;G1GC 사이클은 Evacuation Pause Phase와 Concurrent Marking Phase로 구성된다.&lt;/p&gt;

&lt;p&gt;Evacuation Pause 단계에서는 application 실행을 멈추고 multi-thread로 collection set의 region을 정리한다. 이 단계에서 Heap의 모든 Young Generation(Eden+Survivor region의 집합)에 대한 Young GC가 수행되고 일부 Old Region에 대한 GC가 수행되기도 한다.&lt;/p&gt;

&lt;p&gt;Evacuation Pause 단계에서 Old GC (Initial-mark)가 수행되었으면 Concurrent Marking 단계가 수행된다. Young GC만 일어났다면 이 단계는 건너뛰고 다음 Evacuation Pause 단계가 실행된다. Concurrent Marking 단계에서는 CMS의 Concurrent Marking 단계처럼 application 실행과 함께 concurrent 하게 live objects를 마킹한다. 이 단계를 통해 Mixed GC의 대상이 될 객체를 찾으면 다음 Evcuation Pause 단계에서 Mixed GC가 일어난다.&lt;/p&gt;

&lt;h3 id=&quot;evacuation-pause&quot;&gt;Evacuation Pause&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/gc-evacuation.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Evacuation Pause 단계에서는 young GC만 수행되기도 하고, initial-mark가 같이 수행되기도, mixed GC가 수행되기도 한다.&lt;/p&gt;

&lt;h4 id=&quot;eden-survivor-영역-변화&quot;&gt;Eden, Survivor 영역 변화&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;[Eden: 140.0M(140.0M)-&amp;gt;0.0B(277.0M) Survivors: 4096.0K-&amp;gt;11264.0K Heap: 146.3M(240.0M)-&amp;gt;13087.6K(480.0M)]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eden 영역의 크기가 140.0M 에서 277.0M로 늘어났고 Survivor 영역도 4096.0K 에서 11264.0K로 늘어났다. G1GC에서는 Young, Old Generation의 영역의 위치가 고정되어있지 않을 뿐만 아니라 Young, Old Generation의 크기도 고정되어 있지 않고 변화한다.&lt;/p&gt;

&lt;h3 id=&quot;concurrent-marking&quot;&gt;Concurrent Marking&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/in-post/gc-marking.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Concurrent Marking 단계에서는 live objects를 마크하고, 빈 region이 발견되면 Cleanup 단계에서 바로 할당 해제한다. live objects도 있고 garbage object도 있는 region이 있다면 다음 단계의 Evacuation Pause 단계에서 Mixed GC가 수행된다.&lt;/p&gt;

&lt;p&gt;G1GC에서 Mixed GC가 Old 영역의 메모리를 해제하는 주된 방법이기 때문에 Heap 영역이 꽉 차기 전에 Concurrent Marking 단계가 수행되는 것이 중요하다. 이 단계가 마무리 되기 전에 Old 영역 메모리 할당에 실패한다면 Full GC가 일어날 것이다.&lt;/p&gt;

&lt;h4 id=&quot;1-initial-marking&quot;&gt;1. Initial marking&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;6.562: [GC pause (G1 Evacuation Pause) (young) (initial-mark), 0.1264036 secs]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;stop-the-world pause를 발생시키며 GC Root가 참조하는 모든 객체를 마킹한다. 이 작업은 Young GC가 일어날 때 어차피 수행되어야 하는 작업이기 때문에 Young GC가 일어날 때 같이 수행한다. (piggy-backed) 그래서 매우 빠르게 완료된다.&lt;/p&gt;

&lt;h4 id=&quot;2-concurrent-root-region-scanning&quot;&gt;2. Concurrent root region scanning&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;6.688: [GC concurrent-root-region-scan-start] &lt;br /&gt;
6.728: [GC concurrent-root-region-scan-end, 0.0395895 secs]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;application 실행과 concurrent하게 실행된다. initial-mark에서 살아남은 survivor region이 참조하는 객체들을 스캔한다. 이 작업은 Evcuation Pause가 일어나기 전에 완료해야 하는데, Evacuation Pause가 일어나면 initial-mark가 새로 수행될 것이고 그러면 survivor region이 변경되기 때문이다.&lt;/p&gt;

&lt;h4 id=&quot;3-concurrent-marking&quot;&gt;3. Concurrent marking&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;6.728: [GC concurrent-mark-start] &lt;br /&gt;
6.790: [GC concurrent-mark-end, 0.0625920 secs]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CMS의 concurrent marking 과 같이 multi-thread로 application 실행과 동시에 heap 전체의 live objects를 마킹한다.&lt;/p&gt;

&lt;h4 id=&quot;4-remarking&quot;&gt;4. Remarking&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;6.791: [GC remark 6.791: [Finalize Marking, 0.0010554 secs] 6.792: [GC ref-proc, 0.0003267 secs] 6.792: [Unloading, 0.0124570 secs], 0.0142482 secs]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;stop-the-world pause를 발생시키며 수행된다. concurrent marking 단계가 application 실행과 동시에 수행되느라, 새로 참조가 생긴 live objects를 추가적으로 마킹한다.&lt;/p&gt;

&lt;h4 id=&quot;5-cleanup&quot;&gt;5. Cleanup&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;6.805: [GC cleanup 19745K-&amp;gt;19745K(480M), 0.0013692 secs]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;live objects가 하나도 없는 region은 바로 reclaimed 되어서 avaialble region으로 메모리 할당을 해제한다. live objects도 있고 garbage object도 있는 region이 있다면 다음 단계의 Evacuation Pause 단계에서 Mixed GC가 수행된다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/poonam/understanding-g1-gc-logs&quot;&gt;Oracle : Understanding G1GC logs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.redhat.com/en/blog/collecting-and-reading-g1-garbage-collector-logs-part-2&quot;&gt;Redhat : Collecting and reading G1GC logs part2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=2496621&amp;amp;seqNum=5&quot;&gt;Garbage First GC&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/08/19/java-g1gc-part2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/19/java-g1gc-part2/</guid>
        
        <category>자바</category>
        
        
      </item>
    
      <item>
        <title>Understanding Java G1GC - Part1</title>
        <description>&lt;h3 id=&quot;heap-메모리-구조&quot;&gt;Heap 메모리 구조&lt;/h3&gt;

&lt;p&gt;이전의 GC와는 다르게 Heap 영역을 (young, old) Generation 으로 분할하지 않는다. Heap 전체를 일정한 크기로 쪼개서 각 조각별로 메모리를 관리한다. 이때 쪼개진 메모리 조각을 region이라고 부른다.  region의 크기는 작게는 1MB 부터 32MB 까지 설정된다. 보통 Heap이 약 2000개로 나눠지도록 region의 크기가 정해진다. 예를 들어 메모리의 크기가 8GB 라면 region의 크기는 8GB/2000 = 4GB가 된다.&lt;/p&gt;

&lt;h3 id=&quot;region&quot;&gt;Region&lt;/h3&gt;

&lt;p&gt;Old, Young Generation의 개념이 아예 사라진 것은 아니다. 메모리의 크기를 정해두고 이 영역은 young generation, 나머지 메모리는 old generation이라고 정해두지 않을 뿐이지 객체의 age에 따른 generation 개념은 G1GC에도 있다. region 하나하나가 동적으로 young region이 되었다가 old region이 되었다가 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/gc-region.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eden : 새로 생성한 대부분의 객체가 저장되는 곳&lt;/p&gt;

  &lt;p&gt;Survivor : Eden 영역에서 GC 발생 후 살아남은 객체가 이동하는 곳&lt;/p&gt;

  &lt;p&gt;Old : Survivor 영역에서 GC 발생 후 계속 살아남은 객체가 이동하는 곳&lt;/p&gt;

  &lt;p&gt;Humongous : region 크기의 50%가 넘는 큰 객체가 저장되는 곳&lt;/p&gt;

  &lt;p&gt;Available/unused : 새로운 region이 될 수 있는, 아무것도 할당되지 않은 곳&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eden, Survivor region을 통틀어 Young Generation이라고 하고 Old region의 집합을 Old Generation이라고 한다. 각 region은 GC가 일어남에 따라서 old region이 되기도, eden region이 되기도, survivor region이 되기도 한다.&lt;/p&gt;

&lt;p&gt;GC가 일어날 때는 각 region 별로 GC가 발생하는데 GC가 발생 후 살아남은 live object는 다른 region으로 copy 한다. garbage object는 region에 남고, 그 region은 다른 객체가 할당될 수 있도록 available region으로 바뀐다.&lt;/p&gt;

&lt;p&gt;region 별로 GC를 하면 장점이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Heap 전체를 한꺼번에 정리하는 것보다 region 별로 concurrent 하게 collection을 하면 stop-the-world pause time을 줄일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GC 이후 live object가 새로운 region으로 옮겨갈 때 한 곳에 차곡차곡 쌓을 수 있다. compaction 작업을 따로 하지 않아도 compaction을 한 효과를 볼 수 있는 것이다. 다른 GC 방식에서는 compaction 작업을 위해 전체 Heap을 스캔해야 하는 걸 생각해보면 효율적이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;young-gc&quot;&gt;Young GC&lt;/h3&gt;

&lt;p&gt;Young GC는 eden region이 일정 갯수 이상 할당되었을 때 발생한다. Eden 영역의 크기는 정해져 있지 않고 GC가 일어남에 따라 변하는데 이 크기가 가득 차면 Young GC를 수행한다.&lt;/p&gt;

&lt;p&gt;Young GC는 stop-the-world pause를 발생시키고 multi-thread로 동작한다. Young GC가 일어날 때는 Heap 영역의 모든 Young generation (Eden region, Survivor region의 집합)이 전부 collectioin의 대상이 된다.&lt;/p&gt;

&lt;p&gt;Age가 되지 않은 객체는 survivor영역으로 copy하고 promotion 대상 객체는 Old Generation Region으로 copy한다. 만약 survivor 영역이나 old 영역에 copy할 자리가 없다면 available region을 하나 새로 할당해서 사용한다. GC 대상 Young Generation Region은 garbage로 간주하고 Region 단위로 할당을 해지한다.&lt;/p&gt;

&lt;h3 id=&quot;old-gc&quot;&gt;Old GC&lt;/h3&gt;

&lt;p&gt;Old 영역의 GC는 자바 heap 메모리의 일정 퍼센트 이상이 사용 중일 때 initial-mark가 수행되면서 발생한다. CMS는 Old 영역의 크기가 일정 퍼센트 이상 사용 중일 때 Old GC가 발생하는 반면, G1GC는 전체 Heap 크기에 의해 발생함을 주의한다. 기본 퍼센트는 45%이고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:InitiatingHeapOccupancyPercent&lt;/code&gt; 옵션을 통해 원하는 값을 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;Old 영역 GC가 수행될 때는 항상 Young GC가 수행될 때 같이 수행된다. Old 영역의 GC의 시작인 initial-mark 단계가 young gc가 수행될 때 같이 수행되기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;mixed-gc&quot;&gt;Mixed GC&lt;/h3&gt;

&lt;p&gt;G1GC에서는 Old GC가 Young GC가 일어날 때 같이 수행되는데 이렇게 Young GC와 Old GC가 동시에 수행되는 작업을 Mixed GC라고 한다.&lt;/p&gt;

&lt;h3 id=&quot;full-gc&quot;&gt;Full GC&lt;/h3&gt;

&lt;p&gt;Heap에 더이상 할당할 메모리가 없을 때 full GC가 일어난다. full GC는 자바 Heap 전체에 대한 Compaction 작업을 수행한다. 이 때 발생하는 Compaction은 Serial GC에서 수행하는 Compaction과 같이 Single Thread로 수행되며, 무지 느리다. 그래서 G1GC에서는 full gc가 일어나지 않는 것을 전제로 한다.&lt;/p&gt;

&lt;p&gt;Humongous region은 연속된 메모리를 사용하는데 Humongous region이 사용할 연속된 메모리가 확보되지 않을 때에도 full gc가 일어난다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/gctuning/garbage-first-garbage-collector.htm#JSGCT-GUID-F1BE86FA-3EDC-4D4F-BDB4-4B044AD83180&quot;&gt;Oracle : Garbage first garbage collector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plumbr.io/handbook/garbage-collection-algorithms-implementations/g1&quot;&gt;Plumbr : Garbage collection algorithms implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://initproc.tistory.com/entry/G1-Garbage-Collection&quot;&gt;Blog : G1 Garbage Collection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://logonjava.blogspot.com/2015/08/java-g1-gc-full-gc.html&quot;&gt;Blog : Java G1GC full gc&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/08/18/java-g1gc-part1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/18/java-g1gc-part1/</guid>
        
        <category>자바</category>
        
        
      </item>
    
      <item>
        <title>Java의 매개변수 전달방식</title>
        <description>&lt;p&gt;Java는 매개 변수를 전달할 때 언제나 call-by-value 방식입니다. 변수를 넘길 때 변수의 주소값을 넘기는게 아니라 변수에 저장된 값을 복사해 메서드 안에서 사용합니다. 그래서 매개변수의 값은 메서드 안에서만 통용되는 local-variable 입니다.&lt;/p&gt;

&lt;p&gt;간단한 예를 통해 확인해보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;primitive-type의-매개변수&quot;&gt;primitive type의 매개변수&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;plusOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plusOne 메소드 밖에서 a값 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plusOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plusOne 메소드 안에서 a값 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 결과&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;plusOne 메소드 안에서 a값 : 2&lt;br /&gt;
plusOne 메소드 밖에서 a값 : 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;plusOne 메소드의 매개변수 a에는 caller 메소드(test1)에서 넘긴 a의 값이 복사되어 담겨있을 뿐 입니다. 그래서 메소드 안에서 일어난 변경이 caller에는 전달되지 않습니다. 매개변수로 객체를 전달 받아도 같을까요?&lt;/p&gt;

&lt;h3 id=&quot;object-type의-매개변수&quot;&gt;Object type의 매개변수&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;changeBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;changeBook 밖 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changeBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc new&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;changeBook 안 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행결과&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;changeBook 안 : Book(isbn=0, title=abc new)&lt;br /&gt;
changeBook 밖 : Book(isbn=123, title=abc)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체를 전달해도 메소드 밖에서 객체가 바뀌지 않는 걸 보니 call-by-value가 맞나봅니다. 그렇다면 메소드 안에서 객체의 상태를 바꿔도 변하지 않을까요?&lt;/p&gt;

&lt;h3 id=&quot;object-type의-매개변수-상태-변경&quot;&gt;Object type의 매개변수 상태 변경&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;editBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editBook 밖 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;editBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cdf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editBook 안 : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행결과&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;editBook 안 : Book(isbn=123, title=cdf)&lt;br /&gt;
editBook 밖 : Book(isbn=123, title=cdf)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아니 이럴수가 있나요? 분명 메소드의 매개변수 값은 call-by-value로 전달해서 지역적으로 사용될텐데 왜 메소드 안에서 수정한 결과가 메소드 바깥에도 반영되는 걸까요? 이거 정말 call-by-value로 전달되는게 맞습니까?&lt;/p&gt;

&lt;p&gt;결과적으로 말하면 Java에서 매개변수 전달방식은 언제나 call-by-value가 맞습니다. 마지막 예제가 call-by-reference 처럼 보이는 것은 객체 변수가 저장하고 있는 값이 reference 이기 때문입니다.&lt;/p&gt;

&lt;h3 id=&quot;변수에-저장되는-값&quot;&gt;변수에 저장되는 값&lt;/h3&gt;
&lt;p&gt;자바에서 primitive type의 변수에 저장되는 값은 value 자체입니다. 반면에 Object type의 변수에 저장되는 값은 그 객체가 저장되어 있는 곳의 주소 즉, reference 입니다.&lt;/p&gt;

&lt;p&gt;그래서 primitive type의 매개변수를 전달할 때는 primitive type 변수가 가지고 있는 값인 value 값 자체가 복사되고 Object type의 매개변수를 전달할 때는 Object type 변수가 가지고 있는 value 값 즉, reference가 복사되어 전달되는 것입니다.&lt;/p&gt;

&lt;p&gt;두 번째 예제의 경우에는 매개변수로 넘겨받은 값(book)에 새로운 객체(newBook)를 할당했으니 매개변수 값(book)에 새로운 객체의 reference 값(newBook의 주소)이 저장됩니다. caller에서 넘겨준 원 객체에 대한 참조는 새로운 객체로 덮어씌워질 뿐 원객체에 대한 변경은 일어나지 않는 것입니다.&lt;/p&gt;

&lt;p&gt;세 번째 예제의 경우에는 매개변수로 넘겨받은 변수 book은 원래 book 객체가 가지고 있는 값인 book값의 주소가 복사되어 담겨있습니다. 그래서 book을 참조로 객체의 상태를 수정하면 원객체의 값이 수정되는 것입니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Apr 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019/04/27/call-by-value/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/27/call-by-value/</guid>
        
        <category>자바</category>
        
        
      </item>
    
  </channel>
</rss>
